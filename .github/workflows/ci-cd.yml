name: Build, Push, and Deploy to AWS Infrastructure

on:
  push:
    branches:
      - master # Production
      - 62-aws-s3-and-fargate-deployment # Test
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set IMAGE_TAG to Commit SHA
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Run Docker build script
        run: bash ./build_docker.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker image to ECR
        run: |
          docker tag rubber-duck:latest 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${{ github.sha }}
          docker push 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${{ github.sha }}

      - name: Complete Docker push
        run: echo "Docker images pushed to ECR successfully!"

  deploy_to_cloudformation:
    needs: [build_and_push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set ENVIRONMENT Variable
        run: echo "ENVIRONMENT=production" >> $GITHUB_ENV

      - name: Deploy ECS Infrastructure with CloudFormation
        run: |
          aws cloudformation deploy \
            --stack-name rubber-duck-${{ github.sha }} \
            --template-file infra/ecs-infra.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              ClusterName=DuckCluster-${{ github.sha }} \
              TaskDefinitionFamily=rubber-duck-${{ env.ENVIRONMENT }} \
              ContainerName=duck-container-${{ env.ENVIRONMENT }} \
              ImageURI=844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${{ github.sha }}

      - name: Register ECS Task Definition and Deploy
        run: |
          bash .github/workflows/esc_setup.sh \
            "DuckCluster-${{ github.sha }}" \
            "DuckService-${{ env.ENVIRONMENT }}" \
            "rubber-duck-${{ env.ENVIRONMENT }}" \
            "844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${{ github.sha }}" \
            "${{ secrets.AWS_REGION }}" \
            "${{ secrets.EXECUTION_ROLE }}" \
            "${{ secrets.ENV_FILE_S3_PATH }}"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster DuckCluster-${{ github.sha }} \
            --service DuckService-${{ env.ENVIRONMENT }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Check ECS Service Status
        run: |
          aws ecs describe-services \
            --cluster DuckCluster-${{ github.sha }} \
            --services DuckService-${{ env.ENVIRONMENT }} \
            --region ${{ secrets.AWS_REGION }}
