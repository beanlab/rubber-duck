name: Build, Push, and Deploy to AWS Infrastructure

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      local_config:
        description: "Path to local config file to upload"
        required: false
        type: string

jobs:
  Extract_SHA:
    runs-on: ubuntu-latest
    outputs:
      Short_SHA: ${{ steps.Extract_SHA.outputs.Short_SHA }}
      Extract_Branch: ${{ steps.Extract_Branch.outputs.Branch_Name }}
      Combined: ${{ steps.Short_SHA_and_Branch_Name.outputs.Combined }}
      Commit_Message: ${{ steps.Extract_Commit_Message.outputs.Commit_Message }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract branch name
        id: Extract_Branch
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-' | tr -cd '[:alnum:]-')
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Extract short SHA
        id: Extract_SHA
        run: |
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-5)
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Extract Commit Message
        id: Extract_Commit_Message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          # Escape newlines and quotes for JSON
          COMMIT_MSG=$(echo "$COMMIT_MSG" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Combine short SHA and Branch Name
        id: Short_SHA_and_Branch_Name
        run: |
          COMBINED="${BRANCH_NAME}-${SHORT_SHA}"
          echo "COMBINED=${COMBINED}" >> $GITHUB_ENV
          echo "combined=${COMBINED}" >> $GITHUB_OUTPUT

  Docker_Build_and_Push:
    runs-on: ubuntu-latest
    environment: pre-production
    needs: Extract_SHA
    outputs:
      docker_image_tag: ${{ steps.set_outputs.outputs.docker_image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run Docker build script
        run: bash .github/scripts/build_docker.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck

      - name: Tag and Push Docker Image
        id: set_outputs
        run: |
          IMAGE_TAG="${{ needs.Extract_SHA.outputs.combined }}"
          echo "Tagging image as: $IMAGE_TAG"

          docker tag 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:latest \
            844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:$IMAGE_TAG

          docker push 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:$IMAGE_TAG

          # ✅ Set the output for use in other jobs
          echo "docker_image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Complete Docker push
        run: echo "Docker image pushed to ECR with tag ${{ needs.Extract_SHA.outputs.combined }}!"

  Notify_Discord_of_Docker_Build_and_Push:
    runs-on: ubuntu-latest
    needs: [Extract_SHA, Docker_Build_and_Push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send SHA to Discord Webhook
        run: |
          COMBINED="${{ needs.Extract_SHA.outputs.combined }}"
          COMMIT_MSG="${{ needs.Extract_SHA.outputs.Commit_Message }}"
          DISCORD_WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"

          MESSAGE="✅ Docker Build Updated!\n**Commit Message:**\n$COMMIT_MSG\n**Image Tag:**\n\`\`\`md\n$COMBINED\n\`\`\` "
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's/"/\\"/g')
          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$ESCAPED_MESSAGE\"}" "$DISCORD_WEBHOOK_URL"

  Update_Env_File:
    runs-on: ubuntu-latest
    environment: pre-production
    needs:
      [
        Docker_Build_and_Push,
        Extract_SHA,
        Notify_Discord_of_Docker_Build_and_Push,
      ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create secrets file
        run: |
          cat > secrets.env << EOL
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          ENVIRONMENT=pre-production
          EOL

      - name: Upload secrets to S3
        run: |
          aws s3 cp secrets.env "s3://rubber-duck-config/production-secrets.env" --no-progress

      - name: Send notification to Discord
        run: |
          DISCORD_WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          COMMIT_SHA="${{ needs.Extract_SHA.outputs.short_sha }}"

          MESSAGE="✅ Environment File Updated. Commit: \`$COMMIT_SHA\`"
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's/"/\\"/g')
          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$ESCAPED_MESSAGE\"}" "$DISCORD_WEBHOOK_URL"

  Update_Production_Config:
    runs-on: ubuntu-latest
    needs:
      [
        Docker_Build_and_Push,
        Extract_SHA,
        Notify_Discord_of_Docker_Build_and_Push,
      ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload Production Config
        run: bash .github/scripts/upload-config.sh ${{secrets.S3_BUCKET_NAME}} ${{secrets.S3_LOCAL_PRODUCTION_CONFIG_PATH_YAML}}

      - name: Send notification to Discord
        run: |
          DISCORD_WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          COMMIT_SHA="${{ needs.Extract_SHA.outputs.short_sha }}"

          MESSAGE="✅ Production Config Updated. Commit: \`$COMMIT_SHA\`"
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's/"/\\"/g')
          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$ESCAPED_MESSAGE\"}" "$DISCORD_WEBHOOK_URL"
