name: Build, Push, and Deploy to AWS Infrastructure

on:
  push:
    branches:
      - master
      - sql-fixes
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')" >> $GITHUB_ENV

      - name: Extract short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::5}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run Docker build script
        run: bash ./infra/build_docker.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck

      - name: Push Docker image to ECR
        run: |
          IMAGE_TAG="${BRANCH_NAME}-${SHORT_SHA}"
          echo "Tagging image as: $IMAGE_TAG"
          
          docker tag 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:latest \
            844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:$IMAGE_TAG

          docker push 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:$IMAGE_TAG

      - name: Complete Docker push
        run: echo "Docker image pushed to ECR with tag ${BRANCH_NAME}-${SHORT_SHA}!"


  deploy_to_cloudformation:
    needs: [build_and_push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if secrets are set
        run: |
          echo "Checking if secrets are set..."
          echo "VPC_ID is set: ${{ secrets.VPC_ID != '' }}"
          echo "SUBNET_IDS is set: ${{ secrets.SUBNET_IDS != '' }}"
          echo "SECURITY_GROUP_ID is set: ${{ secrets.SECURITY_GROUP_ID != '' }}"
          echo "EXECUTION_ROLE is set: ${{ secrets.EXECUTION_ROLE != '' }}"
          echo "ENV_FILE_S3_PATH is set: ${{ secrets.ENV_FILE_S3_PATH != '' }}"
      - name: Deploy ECS Infrastructure with CloudFormation
        id: deploy
        run: |
          # More detailed debugging
          echo "Checking actual values (partial to avoid exposing secrets):"
          EXECUTION_ROLE="${{ secrets.EXECUTION_ROLE }}"
          TASK_ROLE="${{ secrets.EXECUTION_ROLE }}"  # Using same value as execution role
          ENV_FILE="${{ secrets.ENV_FILE_S3_PATH }}"

          # Check if values are actually non-empty strings
          echo "EXECUTION_ROLE length: ${#EXECUTION_ROLE}"
          echo "TASK_ROLE length: ${#TASK_ROLE}"
          echo "ENV_FILE length: ${#ENV_FILE}"

          # Show partial values (first and last few characters)
          if [ ${#EXECUTION_ROLE} -gt 10 ]; then
            echo "EXECUTION_ROLE starts with: ${EXECUTION_ROLE:0:10}...ends with: ...${EXECUTION_ROLE: -10}"
          fi

          if [ ${#TASK_ROLE} -gt 10 ]; then
            echo "TASK_ROLE starts with: ${TASK_ROLE:0:10}...ends with: ...${TASK_ROLE: -10}"
          fi

          if [ ${#ENV_FILE} -gt 10 ]; then
            echo "ENV_FILE starts with: ${ENV_FILE:0:10}...ends with: ...${ENV_FILE: -10}"
          fi

          # Set fallbacks if empty
          if [ -z "$TASK_ROLE" ]; then
            echo "WARNING: TaskRoleArn is empty! Setting default value."
            TASK_ROLE="arn:aws:iam::844825014198:role/ecsTaskExecutionRole"
          fi

          if [ -z "$ENV_FILE" ]; then
            echo "WARNING: EnvFileS3Path is empty! Setting default value."
            ENV_FILE="arn:aws:s3:::rubber-duck-config/wiley-secrets.env"
          fi

          # Run with quoted values to prevent issues
          aws cloudformation deploy \
            --stack-name rubber-duck-production \
            --template-file infra/ecs-infra.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
            Environment=production \
            ClusterName=DuckCluster-rubber-duck-production \
            TaskDefinitionFamily=rubber-duck-production \
            ContainerName=duck-container-production \
            "ImageURI=844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${{ github.sha }}" \
            "VpcId=${{ secrets.VPC_ID }}" \
            "SubnetIds=${{ secrets.SUBNET_IDS }}" \
            "SecurityGroupId=${{ secrets.SECURITY_GROUP_ID }}" \
            "ExecutionRoleArn=${EXECUTION_ROLE}" \
            "TaskRoleArn=${TASK_ROLE}" \
            "Cpu=1024" \
            "Memory=2048" \
            "EnvFileS3Path=${ENV_FILE}"
