name: Build, Push, and Deploy to AWS Infrastructure

on:
  push:
    branches:
      - master
      - 62-aws-s3-and-fargate-deployment
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set IMAGE_TAG to Commit SHA
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Get commit message and SHA
        run: |
          # Get the first line of commit message, remove special chars, convert to lowercase
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n1 | tr -cd '[:alnum:]-' | tr '[:upper:]' '[:lower:]' | cut -c1-20)
          # Create a short, readable suffix with commit message and first 6 chars of SHA
          echo "RESOURCE_SUFFIX=${COMMIT_MSG}-${GITHUB_SHA::6}" >> $GITHUB_ENV
          echo "Using resource suffix: ${RESOURCE_SUFFIX}"

      - name: Run Docker build script
        run: bash ./build_docker.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker image to ECR
        run: |
          docker push 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${{ github.sha }}

      - name: Complete Docker push
        run: echo "Docker image pushed to ECR successfully!"

  deploy_to_cloudformation:
    needs: [build_and_push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get commit message and SHA
        run: |
          # Get the first line of commit message, remove special chars, convert to lowercase
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n1 | tr -cd '[:alnum:]-' | tr '[:upper:]' '[:lower:]' | cut -c1-20)
          # Create a short, readable suffix with commit message and first 6 chars of SHA
          echo "RESOURCE_SUFFIX=${COMMIT_MSG}-${GITHUB_SHA::6}" >> $GITHUB_ENV
          echo "Using resource suffix: ${RESOURCE_SUFFIX}"

      - name: Deploy ECS Infrastructure with CloudFormation
        id: deploy
        run: |
          echo "Checking parameter values..."
          echo "ExecutionRoleArn is set: ${{ secrets.EXECUTION_ROLE != '' }}"
          echo "TaskRoleArn is set: ${{ secrets.TASK_ROLE != '' }}"
          echo "VpcId is set: ${{ secrets.VPC_ID != '' }}"
          echo "SubnetIds is set: ${{ secrets.SUBNET_IDS != '' }}"
          echo "SecurityGroupId is set: ${{ secrets.SECURITY_GROUP_ID != '' }}"
          
          # Set variables for clarity
          EXECUTION_ROLE="${{ secrets.EXECUTION_ROLE }}"
          TASK_ROLE="${{ secrets.TASK_ROLE }}"
          VPC_ID="${{ secrets.VPC_ID }}"
          SUBNET_IDS="${{ secrets.SUBNET_IDS }}"
          SECURITY_GROUP_ID="${{ secrets.SECURITY_GROUP_ID }}"
          
          # Debug output (without exposing actual values)
          echo "Parameter lengths:"
          echo "ExecutionRoleArn length: ${#EXECUTION_ROLE}"
          echo "TaskRoleArn length: ${#TASK_ROLE}"
          echo "VpcId length: ${#VPC_ID}"
          echo "SubnetIds length: ${#SUBNET_IDS}"
          echo "SecurityGroupId length: ${#SECURITY_GROUP_ID}"
          
          aws cloudformation deploy \
          --stack-name rubber-duck-${{ env.RESOURCE_SUFFIX }} \
          --template-file infra/ecs-infra.yml \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset \
          --rollback-configuration "{\"RollbackTriggers\": [{\"Type\": \"AWS::CloudWatch::Alarm\", \"Arn\": \"*\"}]}" \
          --parameter-overrides \
           Environment=production \
           ClusterName=DuckCluster-${{ env.RESOURCE_SUFFIX }} \
           TaskDefinitionFamily=rubber-duck-production \
           ContainerName=duck-container-production \
           ImageURI=844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${{ github.sha }} \
           VpcId="${VPC_ID}" \
           SubnetIds="${SUBNET_IDS}" \
           SecurityGroupId="${SECURITY_GROUP_ID}" \
           ExecutionRoleArn="${EXECUTION_ROLE}" \
           TaskRoleArn="${TASK_ROLE}" \
           Cpu=1024 \
           Memory=2048

      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "Deployment failed. Cleaning up resources..."
          aws cloudformation delete-stack \
            --stack-name rubber-duck-${{ env.RESOURCE_SUFFIX }} \
            --region ${{ secrets.AWS_REGION }}

          echo "Waiting for stack deletion to complete..."
          aws cloudformation wait stack-delete-complete \
            --stack-name rubber-duck-${{ env.RESOURCE_SUFFIX }} \
            --region ${{ secrets.AWS_REGION }}

          echo "Cleanup completed."

      - name: Register ECS Task Definition and Deploy
        run: |
          bash .github/workflows/esc_setup.sh \
            "DuckCluster-${{ env.RESOURCE_SUFFIX }}" \
            "DuckService-${{ env.RESOURCE_SUFFIX }}" \
            "rubber-duck-production" \
            "844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${{ github.sha }}" \
            "${{ secrets.AWS_REGION }}" \
            "${{ secrets.EXECUTION_ROLE }}" \
            "${{ secrets.ENV_FILE_S3_PATH }}"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster DuckCluster-${{ env.RESOURCE_SUFFIX }} \
            --service DuckService-${{ env.RESOURCE_SUFFIX }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Check ECS Service Status
        run: |
          aws ecs describe-services \
            --cluster DuckCluster-${{ env.RESOURCE_SUFFIX }} \
            --services DuckService-${{ env.RESOURCE_SUFFIX }} \
            --region ${{ secrets.AWS_REGION }}
