name: Build, Push, and Deploy to AWS Infrastructure

on:
  push:
    branches:
      - master
      - 110-fargate-update
  workflow_dispatch:
    inputs:
      local_config:
        description: "Path to local config file to upload (e.g., infra/config.json)"
        required: false
        default: "infra/config.json"
        type: string

jobs:
  send_config:
    runs-on: ubuntu-latest
    outputs:
      config_s3_path: ${{ steps.set_outputs.outputs.config_s3_path }}
      secrets_s3_path: ${{ steps.set_outputs.outputs.secrets_s3_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create secrets file
        run: |
          cat > secrets.env << EOL
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          CONFIG_FILE_S3_PATH=s3://rubber-duck-config/config.json
          ENV_FILE_S3_PATH=s3://rubber-duck-config/secrets.env
          ENVIRONMENT=production
          EOL

      - name: Upload config and secrets to S3
        id: set_outputs
        run: |
          # Use fixed paths
          CONFIG_S3_PATH="s3://rubber-duck-config/config.json"
          SECRETS_S3_PATH="s3://rubber-duck-config/secrets.env"

          # Debug file paths
          echo "Config file path: ${{ inputs.local_config || 'infra/config.json' }}"
          echo "Target S3 path: $CONFIG_S3_PATH"

          # Upload files
          aws s3 cp "${{ inputs.local_config || 'infra/config.json' }}" "$CONFIG_S3_PATH"
          aws s3 cp secrets.env "$SECRETS_S3_PATH"

          # Set outputs for use in other jobs
          echo "config_s3_path=$CONFIG_S3_PATH" >> $GITHUB_OUTPUT
          echo "secrets_s3_path=$SECRETS_S3_PATH" >> $GITHUB_OUTPUT

          echo "Uploaded config to: $CONFIG_S3_PATH"
          echo "Uploaded secrets to: $SECRETS_S3_PATH"

  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.extract_sha.outputs.short_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')" >> $GITHUB_ENV

      - name: Extract short SHA
        id: extract_sha
        run: |
          echo "GITHUB_SHA=${GITHUB_SHA}"  # Debugging
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-5)
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_ENV
          echo "::set-output name=short_sha::${SHORT_SHA}"
          echo "Extracted SHORT_SHA: ${SHORT_SHA}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run Docker build script
        run: bash ./infra/build_docker.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck

      - name: Tag and Push Docker Image
        run: |
          IMAGE_TAG="${BRANCH_NAME}-${SHORT_SHA}"
          echo "Tagging image as: $IMAGE_TAG"

          docker tag 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:latest \
            844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:$IMAGE_TAG

          docker push 844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:$IMAGE_TAG

      - name: Complete Docker push
        run: echo "Docker image pushed to ECR with tag ${BRANCH_NAME}-${SHORT_SHA}!"

  deploy_to_cloudformation:
    needs: [build_and_push, send_config]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy ECS Infrastructure with CloudFormation
        id: deploy
        run: |
          IMAGE_TAG="${{ github.ref_name }}-${{ needs.build_and_push.outputs.short_sha }}"
          echo "Deploying ECS with image tag: ${IMAGE_TAG}"
          echo "Using config path: ${{ needs.send_config.outputs.config_s3_path }}"
          echo "Using secrets path: ${{ needs.send_config.outputs.secrets_s3_path }}"

          aws cloudformation deploy \
            --stack-name rubber-duck-production \
            --template-file infra/ecs-infra.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
            Environment=production \
            ClusterName=DuckCluster-rubber-duck-production \
            TaskDefinitionFamily=rubber-duck-production \
            ContainerName=duck-container-production \
            "ImageURI=844825014198.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/beanlab/rubber-duck:${IMAGE_TAG}" \
            "VpcId=${{ secrets.VPC_ID }}" \
            "SubnetIds=${{ secrets.SUBNET_IDS }}" \
            "SecurityGroupId=${{ secrets.SECURITY_GROUP_ID }}" \
            "ExecutionRoleArn=${{ secrets.EXECUTION_ROLE }}" \
            "TaskRoleArn=${{ secrets.EXECUTION_ROLE }}" \
            "Cpu=1024" \
            "Memory=2048" \
            "EnvFileS3Path=s3://rubber-duck-config/secrets.env" \
            "ConfigFileS3Path=s3://rubber-duck-config/config.json"
