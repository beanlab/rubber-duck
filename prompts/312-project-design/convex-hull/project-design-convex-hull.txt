# Convex Hull

An implementation of the divide-and-conquer algorithm to compute the convex hull of a set of 2D points.

## Project Description

This project uses a **divide-and-conquer** strategy to compute the **convex hull**—the smallest convex polygon that encloses a given set of points in the 2D plane. The algorithm recursively partitions the input, computes hulls on each half, and then merges them by finding the upper and lower tangents between the two partial hulls.

## Background

The convex hull of a set Q of points is the smallest convex polygon P such that every point in Q lies on or inside P. A polygon is _convex_ if, for any two points inside it, the line segment connecting them lies entirely within the polygon.

Convex hull algorithms are fundamental in computational geometry and have applications in:

- Pattern recognition
- Image processing
- GIS
- Collision detection
- Statistical data analysis

## Algorithm Overview

The approach follows these steps:

1. **Divide** the set of n points into two subsets:

   - Left subset `L`: the ⎡n/2⎤ leftmost points
   - Right subset `R`: the ⎣n/2⎦ rightmost points

2. **Recurse** to compute the convex hulls of L and R.

3. **Merge** the two hulls by finding:

   - The **upper tangent**, connecting the topmost boundary points of the left and right hulls
   - The **lower tangent**, connecting the bottommost boundary points

4. **Construct** the final hull by combining segments and eliminating interior edges.

### Tangent-Finding Strategy

- Start with the **rightmost point** of the left hull and the **leftmost point** of the right hull.
- Move along the hulls:
  - Counter-clockwise on the left hull (while slope decreases)
  - Clockwise on the right hull (while slope increases)
- Stop once the connecting line is tangent to both hulls.

### Implementation Hints

- Use circular arrays or modular indexing to simplify traversal.
- Maintain **clockwise** or **counter-clockwise** point ordering throughout.
- The base cases can be:
  - A single point (`n = 1`)
  - Two or three points forming a line or triangle

## Provided Framework

The starter code includes:

- `main.py` — Entry point. Can be modified for debugging (e.g., adding flags).
- `convex_hull.py` — Implement your `compute_hull` method here.
- `test_convex_hull.py` — Basic unit tests to validate correctness.

Note: Only `convex_hull.py` will be preserved during grading. Do not rely on changes to other files.

## Optional: Debugging and Visualization

- Use `plotting.py` to visualize intermediate and final hulls.
- Add the `--debug` flag to enable live, incremental plotting.
- To use plotting features, you may need to install PyQt:

  ```bash
  conda install pyqt
  ```
---------------------------------------------------------------------------------------------------------------
