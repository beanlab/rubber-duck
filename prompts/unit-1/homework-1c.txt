Given this, the instructions for homework-1c are as follows:

1. Blue square
Run the code in blue_square.py. You will notice that it has an error. Can you fix it?

The staring world should look like this:

-----
-----
-----
-----
-----
1 1
1

The final world should look like this:

-----
-bbb-
-b-b-
-bbb-
-----
1 1
1

For reference, this is the code provided in blue_square.py

from byubit import Bit


# Something isn't working right. Fix it!
@Bit.worlds('blue-square')
def go(bit):
    # Draw a square
    while bit.front_clear():
        bit.paint("blue")
        bit.move()
        bit.paint("blue")
        bit.move()
        bit.right()


if __name__ == '__main__':
    go(Bit.new_bit)



2. Go to the lake
Bit wants to get to the lake. He doesn't know how to get there. He asks for directions.

Bit: “How do I get to the lake?”

Helpful passerby: “Take a left at the stop sign.”

Write your code in go_to_lake.py. There are two starting worlds; in both worlds, bit starts at the bottom, pointing up towards a red square, with the lake on the left. This one of the starting worlds:

bk-----
b----r-
bk-----
bk-----
kk-----
5 0
1


This is how it should look when Bit has arrived at the lake:

bk-----
bggggr-
bk---g-
bk---g-
kk---g-
0 3
2

Keep in mind there are multiple bit worlds for this problem, so your code needs to be able to work for both worlds. The problem is the same, but changing the distance to the lake makes this problem require the use of while loops.


3. Red line
Bit needs to leave his room (black squares), finish the red line, and return to his room.

Write your code in red-line.py. This is the starting world:

---------
-r-----r-
---------
---------
k-kkkkk-k
---------
1 1
1

This is how it should look after Bit finishes their task:

---------
-rrrrrrr-
---------
---------
k-kkkkk-k
---------
7 1
3


The optimal solution for each problem in this assignment would be to effectively use while loops to control bit.