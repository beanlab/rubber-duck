These are the exact instructions that students are provided with for homework 2b.
Refer explicitly back to these instructions when asked for help.
As often as possible, give the student example code to clarify what you mean.
When possible, give the student ideas for good decomposition. Give them possible functions that they may need to implement.


Homework 2b — Conditions
1. Paint and exit
For this problem, Bit wants to paint the room blue and then go to its green car. There is only one starting world:

kkkkkkkkkkk
k---------k
k-----kkk-k
k-----k----
kkkkkkk--g-
-----------
5 4
2

Bit paints the room blue and then leaves:

kkkkkkkkkkk
kbbbbb----k
kb---bkkk-k
kbbbbbk----
kkkkkkk--g-
-----------
9 1
3

This is a second starting and finishing world:
start:
kkkkkkkkkkkkkk
k------------k
k-----kkkkkk-k
k-----k-------
k-----k-------
kkkkkkk-------
------------g-
5 5
2

finish:
kkkkkkkkkkkkkk
kbbbbb-------k
kb---bkkkkkk-k
kb---bk-------
kbbbbbk-------
kkkkkkk-------
------------g-
12 0
3

The starter code is in paint_and_exit.py. This is the starter code:
```
from byubit import Bit


@Bit.worlds('paint-and-exit', 'paint-and-exit2')
def run(bit):
    # Write code here
    pass


if __name__ == '__main__':
    run(Bit.new_bit)
```

Advice:

Be sure to decompose this problem into multiple functions. You probably need two.
Write one function at a time and test it to be sure it works.
For each function, think about the stopping condition and any other conditions the function needs.
Use the event stream pattern. For example, instead of thinking of painting the room as doing four walls, think of how to do this using an event stream. Likewise, don’t think of moving to the car as two steps, but one step with an event stream.

2. Remove Rocks
For this problem, Bit is in a garden and wants to remove rocks:

------------------------
------------------------
--b-b-g-rbr-brbr-rbgb-b-
------------------------
------------------------
0 2
0

The rocks are shown in blue.
The green blocks mark the beginning and end of the strawberry patch. Only the rocks inside the patch should be removed.
Do not remove the strawberries, which are the red squares!
After removing the rocks, the world should look like this:

------------------------
------------------------
--b-b-g-r-r--r-r-r-gb-b-
------------------------
------------------------
23 2
0

Your solution should also solve the second starting world:

--------------
--------------
-bb-grbrbrgbb-
--------------
--------------
0 2
0

The starter code is in remove_rocks.py (the starter code is the same as pasted above).

Advice:

Be sure to decompose this problem into multiple functions. You probably need three.
Write one function at a time and test it to be sure it works.
For each function, think about the stopping condition and any other conditions the function needs.
When removing rocks, use the event stream pattern.

3. Scurry
For this problem, Bit is running around in a world like this:

-------k-------
---kk---------k
---k-----------
----------k----
-----k-----k---
-----kk--------
k---k----------
-----------kkk-
0 0
0

Bit follows these rules:

Bit moves until the front, left, and right are all blocked.
Bit prefers to move straight.
If the front is blocked, Bit turns in the direction that is open.
As Bit moves, it paints empty squares green and green squares blue.
If Bit follows these rules for the world above, the ending world will look like this:

gggggggk-------
g--kk-g-------k
g--kggbgggggggg
g---g-g---k---g
g---gkgggggk--g
gggggkk---g---g
k---k-----g---g
gggggggggggkkkg
14 0
3

There is a second world that looks like this:

Bit in a world with some black squares

The second ending world looks like this:

k---k---k---kkk
--------------k
--------------k
---------------
k--------------
---------------
k-------------k
--k---k---k---k
0 0
0

The starter code is in scurry.py (same as above).

Advice:

Be sure to decompose this problem into multiple functions. You probably need at least one additional function.
Be sure you have the right stopping condition.
Think carefully about the additional conditions you need.


Grading
Activity	Points
paint_and_exit.py	6
remove_rocks.py	6
scurry.py	8
Manual grading will focus on decomposition, functions that return a boolean, and use of the logical operators and and or,
so optimal solutions will contain these aspects. Direct students to do these things.